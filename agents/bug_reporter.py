import os
from utils.llm_utils import send_prompt_to_llm  

FAILURE_ANALYSIS_REPORT_PATH = "results/failure_analysis_report.txt"
BUG_REPORT_PATH = "results/bug_report.txt"
PROMPT_PATH = "prompts/bug_reporter_prompt.txt"

def read_prompt_template(file_path):
    # Reads the prompt template from a file.
    if not os.path.exists(file_path):
        raise FileNotFoundError(f"Prompt template not found at: {file_path}")
    
    with open(file_path, "r") as f:
        return f.read()

def read_failure_analysis_report(file_path):
    # Reads the failure analysis report from a file.
    if not os.path.exists(file_path):
        raise FileNotFoundError(f"Failure analysis report not found at: {file_path}")

    with open(file_path, "r") as f:
        return f.read()

def generate_bug_report_with_llm(failure_analysis, api_url="http://127.0.0.1:1234"):
    # Generates a bug report using the LLM based on the failure analysis report.

    # Read the prompt template
    prompt_template = read_prompt_template(PROMPT_PATH)

    # Format the prompt with the failure analysis report
    prompt = prompt_template.format(failure_analysis=failure_analysis)

    # Use the shared utility function to send the prompt to the LLM
    try:
        generated_bug_report = send_prompt_to_llm(prompt, api_url=api_url)
        if not generated_bug_report:
            raise ValueError("No bug report was generated by the model.")
        return generated_bug_report
    except Exception as e:
        raise Exception(f"An error occurred while generating the bug report: {e}")     

def save_bug_report(content, output_path):
    # Saves the bug report to a file.

    os.makedirs(os.path.dirname(output_path), exist_ok=True)  # Ensure the directory exists
    with open(output_path, "w") as f:
        f.write(content)
    print(f"üìÑ Bug report saved to: {output_path}")

def main():
    # Main function to read the failure analysis report, generate a bug report, and save it.
    DEFAULT_API_URL = "http://127.0.0.1:1234"

    try:
        # Read the failure analysis report
        failure_analysis = read_failure_analysis_report(FAILURE_ANALYSIS_REPORT_PATH)
        print("üîç Failure Analysis Report:\n", failure_analysis)

        # Generate the bug report using the LLM
        bug_report = generate_bug_report_with_llm(failure_analysis, api_url=DEFAULT_API_URL)
        if bug_report:
            print("\nüõ†Ô∏è Generated Bug Report:\n")
            print(bug_report)

            # Save the bug report to a file
            save_bug_report(bug_report, BUG_REPORT_PATH)
    except FileNotFoundError as e:
        print(f"‚ùå {e}")

if __name__ == "__main__":
     main()
